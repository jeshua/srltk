package srltk.projects.psrs
import scala.collection.mutable._
import util.control.Breaks._
import scalala.tensor.dense.DenseVector
import scalala.tensor.dense.DenseMatrix
import srltk.projects.psrs.pomdps._
import util.Random

object Discover{
  type Sequence = List[(Int,Int)]
  
  def apply(maxSeqLen : Int, 
            minCount : Int,
            samples : ArrayBuffer[(Int,Int)]) : (List[Sequence], List[Sequence]) 
  = {
    //hashmap to store counts
    val seqMap = new HashMap[Sequence,Long]
    //loop through sequence lengths
    for(size <- 1 to maxSeqLen) {
      //loop through sequences of this length
      for(i <- 0 until (samples.length-size)) {
        val key = (for(m <- i until i+size) yield(samples(m))).toList
        if(!seqMap.contains(key))
          seqMap(key) = 1
        else
          seqMap(key) += 1
      }//end loop over samples
      val total = (for((k,v) <- seqMap) yield (if(v > minCount) 1 else 0)).reduceLeft(_ +_)
      printf("At size %d, total found of freq %d: %d\n",size,minCount,total)

    }//end loop over size
    val tests = (for((k,v) <- seqMap; if(v > minCount)) yield k).toList
    (tests,tests)
  }


  def main(args : Array[String]){
    val pomdp = new FloatReset()
    val numSamples = 50000
    val samples = pomdp.generateSamples(numSamples,new Random())
    Discover(15,numSamples/100,samples)
  }
}
